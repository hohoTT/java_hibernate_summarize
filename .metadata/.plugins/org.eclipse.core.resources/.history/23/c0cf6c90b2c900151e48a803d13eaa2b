package com.wt.hibernate.n_to_1;

import static org.junit.Assert.*;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;

import org.hibernate.Hibernate;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.jdbc.Work;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class HibernateText {

	private SessionFactory sessionFactory;
	private Session session;
	private Transaction transaction;

	@Before
	public void init() {
		// 测试用
		// System.out.println("init");

		Configuration configuration = new Configuration().configure();
		ServiceRegistry serviceRegistry = new ServiceRegistryBuilder()
				.applySettings(configuration.getProperties())
				.buildServiceRegistry();

		sessionFactory = configuration.buildSessionFactory(serviceRegistry);

		session = sessionFactory.openSession();

		transaction = session.beginTransaction();
	}

	@After
	public void destroy() {
		// 测试用
		// System.out.println("destroy");

		transaction.commit();
		session.close();
		sessionFactory.close();
	}
	
	@Test
	public void testManyToOneGet() {
		
		Order order = (Order) session.get(Order.class, 1);
		
	}
	
	@Test
	public void testManyToOne() {
		Customer customer = new Customer();
		customer.setCustomerName("BB");
		
		Order order1 = new Order();
		order1.setOrderName("ORDER-3");
		
		Order order2 = new Order();
		order2.setOrderName("ORDER-4");

		// 设定关联关系
		order1.setCustomer(customer);
		order2.setCustomer(customer);
		
		// 执行 save 操作 先插入 customer，再插入 order ，结果为执行三条insert
		// 先插入一的一端，再插入多的一端，只有 insert 语句
//		session.save(customer);
//		
//		session.save(order1);
//		session.save(order2);	
		
		// 执行 save 操作 先插入 order，再插入  customer
		// 结果为执行三条 insert，两条 update 
		// 先插入多的一端，再插入一的一端，会多出 update 语句
		// 因为在插入多的一端时无法确实一的一端的外键值，所以只能等一的一端插入，再额外发送 update 语句
		// 推荐先插入一的一端，后插入多的一端
		session.save(order1);
		session.save(order2);	
		
		session.save(customer);
		
	}

}
